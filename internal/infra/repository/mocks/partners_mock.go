// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/partners/interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	partners "main-api/internal/domain/partners"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPartnerRepository is a mock of PartnerRepository interface.
type MockPartnerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPartnerRepositoryMockRecorder
}

// MockPartnerRepositoryMockRecorder is the mock recorder for MockPartnerRepository.
type MockPartnerRepositoryMockRecorder struct {
	mock *MockPartnerRepository
}

// NewMockPartnerRepository creates a new mock instance.
func NewMockPartnerRepository(ctrl *gomock.Controller) *MockPartnerRepository {
	mock := &MockPartnerRepository{ctrl: ctrl}
	mock.recorder = &MockPartnerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartnerRepository) EXPECT() *MockPartnerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPartnerRepository) Create(ctx context.Context, partner *partners.PartnerEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, partner)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPartnerRepositoryMockRecorder) Create(ctx, partner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPartnerRepository)(nil).Create), ctx, partner)
}

// GetByFilter mocks base method.
func (m *MockPartnerRepository) GetByFilter(ctx context.Context, filter map[string]interface{}) (*partners.PartnerEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilter", ctx, filter)
	ret0, _ := ret[0].(*partners.PartnerEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFilter indicates an expected call of GetByFilter.
func (mr *MockPartnerRepositoryMockRecorder) GetByFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilter", reflect.TypeOf((*MockPartnerRepository)(nil).GetByFilter), ctx, filter)
}

// GetByID mocks base method.
func (m *MockPartnerRepository) GetByID(ctx context.Context, id string) (*partners.PartnerEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*partners.PartnerEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPartnerRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPartnerRepository)(nil).GetByID), ctx, id)
}

// MockQuotesRepository is a mock of QuotesRepository interface.
type MockQuotesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuotesRepositoryMockRecorder
}

// MockQuotesRepositoryMockRecorder is the mock recorder for MockQuotesRepository.
type MockQuotesRepositoryMockRecorder struct {
	mock *MockQuotesRepository
}

// NewMockQuotesRepository creates a new mock instance.
func NewMockQuotesRepository(ctrl *gomock.Controller) *MockQuotesRepository {
	mock := &MockQuotesRepository{ctrl: ctrl}
	mock.recorder = &MockQuotesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuotesRepository) EXPECT() *MockQuotesRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockQuotesRepository) Create(ctx context.Context, quote *partners.QuoteEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, quote)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockQuotesRepositoryMockRecorder) Create(ctx, quote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockQuotesRepository)(nil).Create), ctx, quote)
}

// MockPoliciesRepository is a mock of PoliciesRepository interface.
type MockPoliciesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPoliciesRepositoryMockRecorder
}

// MockPoliciesRepositoryMockRecorder is the mock recorder for MockPoliciesRepository.
type MockPoliciesRepositoryMockRecorder struct {
	mock *MockPoliciesRepository
}

// NewMockPoliciesRepository creates a new mock instance.
func NewMockPoliciesRepository(ctrl *gomock.Controller) *MockPoliciesRepository {
	mock := &MockPoliciesRepository{ctrl: ctrl}
	mock.recorder = &MockPoliciesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoliciesRepository) EXPECT() *MockPoliciesRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPoliciesRepository) Create(ctx context.Context, policy *partners.PolicyEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPoliciesRepositoryMockRecorder) Create(ctx, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPoliciesRepository)(nil).Create), ctx, policy)
}

// GetByIdAndPartnerID mocks base method.
func (m *MockPoliciesRepository) GetByIdAndPartnerID(ctx context.Context, policyID, partnerID string) (*partners.PolicyEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdAndPartnerID", ctx, policyID, partnerID)
	ret0, _ := ret[0].(*partners.PolicyEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdAndPartnerID indicates an expected call of GetByIdAndPartnerID.
func (mr *MockPoliciesRepositoryMockRecorder) GetByIdAndPartnerID(ctx, policyID, partnerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdAndPartnerID", reflect.TypeOf((*MockPoliciesRepository)(nil).GetByIdAndPartnerID), ctx, policyID, partnerID)
}

// MockInsuranceProvider is a mock of InsuranceProvider interface.
type MockInsuranceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockInsuranceProviderMockRecorder
}

// MockInsuranceProviderMockRecorder is the mock recorder for MockInsuranceProvider.
type MockInsuranceProviderMockRecorder struct {
	mock *MockInsuranceProvider
}

// NewMockInsuranceProvider creates a new mock instance.
func NewMockInsuranceProvider(ctrl *gomock.Controller) *MockInsuranceProvider {
	mock := &MockInsuranceProvider{ctrl: ctrl}
	mock.recorder = &MockInsuranceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsuranceProvider) EXPECT() *MockInsuranceProviderMockRecorder {
	return m.recorder
}

// CreatePolicy mocks base method.
func (m *MockInsuranceProvider) CreatePolicy(ctx context.Context, data partners.InsuranceProviderCreatePolicyRequest) (*partners.InsuranceProviderCreatePolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", ctx, data)
	ret0, _ := ret[0].(*partners.InsuranceProviderCreatePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockInsuranceProviderMockRecorder) CreatePolicy(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockInsuranceProvider)(nil).CreatePolicy), ctx, data)
}

// CreateQuotation mocks base method.
func (m *MockInsuranceProvider) CreateQuotation(ctx context.Context, data partners.InsuranceProviderCreateQuotationRequest) (*partners.InsuranceProviderCreateQuotationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuotation", ctx, data)
	ret0, _ := ret[0].(*partners.InsuranceProviderCreateQuotationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuotation indicates an expected call of CreateQuotation.
func (mr *MockInsuranceProviderMockRecorder) CreateQuotation(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuotation", reflect.TypeOf((*MockInsuranceProvider)(nil).CreateQuotation), ctx, data)
}

// GetPolicy mocks base method.
func (m *MockInsuranceProvider) GetPolicy(ctx context.Context, policyID string) (*partners.InsuranceProviderCreatePolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", ctx, policyID)
	ret0, _ := ret[0].(*partners.InsuranceProviderCreatePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockInsuranceProviderMockRecorder) GetPolicy(ctx, policyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockInsuranceProvider)(nil).GetPolicy), ctx, policyID)
}
